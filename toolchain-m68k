#!/usr/bin/env python3

# Build AmigaOS <= 3.9 M68k cross-toolchain.

import argparse
import logging
import platform
import sys
from fnmatch import fnmatch
from os import environ, path

# URLs for dependencies
URLS = [
    'https://ftp.gnu.org/gnu/m4/m4-1.4.17.tar.gz',
    'https://ftp.gnu.org/gnu/gawk/gawk-3.1.8.tar.gz',
    'https://ftp.gnu.org/gnu/autoconf/autoconf-2.13.tar.gz',
    'https://ftp.gnu.org/gnu/bison/bison-1.35.tar.gz',
    'https://ftp.gnu.org/gnu/texinfo/texinfo-4.12.tar.gz',
    'https://ftp.gnu.org/gnu/automake/automake-1.15.tar.gz',
    ('ftp://ftp.uk.freesbie.org/sites/distfiles.gentoo.org/distfiles/flex-2.5.4a.tar.gz', 'flex-2.5.4.tar.gz'),
    ('http://www.haage-partner.de/download/AmigaOS/NDK39.lha', 'NDK_3.9.lha'),
    ('ftp://ftp.exotica.org.uk/mirrors/geekgadgets/amiga/m68k/snapshots/990529/bin/libamiga-bin.tgz', 'libamiga.tar.gz'),
    ('ftp://ftp.exotica.org.uk/mirrors/geekgadgets/amiga/m68k/snapshots/990529/src/libm-5.4-src.tgz', 'libm-5.4.tar.gz'),
    ('http://downloads.sf.net/project/amiga/ixemul.library/48.2/ixemul-src.lha', 'ixemul-48.2.lha'),
    ('http://server.owl.de/~frank/tags/vasm1_8d.tar.gz', 'vasm.tar.gz'),
    ('http://server.owl.de/~frank/tags/vlink0_16a.tar.gz', 'vlink.tar.gz'),
    ('http://server.owl.de/~frank/tags/vbcc0_9fP1.tar.gz', 'vbcc.tar.gz'),
    'http://de3.aminet.net/dev/asm/ira.lha',
    'http://sun.hasenbraten.de/~frank/projects/download/vdam68k.tar.gz',
    ('http://server.owl.de/~frank/vbcc/current/vbcc_target_m68k-amigaos.lha', 'vclib.lha'),
    ('https://github.com/cnvogelg/amitools/archive/refs/tags/v0.6.0.tar.gz', 'amitools-0.6.0.tar.gz')
]

# Multi-lib configurations for M68k
MULTILIB = [
    ('', []),
    ('libb', ['-fbaserel', '-DSMALL_DATA']),
    ('libm020', ['-m68020']),
    ('libb/libm020', ['-fbaserel', '-DSMALL_DATA', '-m68020']),
    ('libm020/libm881', ['-m68020', '-m68881']),
    ('libb/libm020/libm881', ['-fbaserel', '-DSMALL_DATA', '-m68020', '-m68881']),
    ('libb32/libm020', ['-fbaserel32', '-DSMALL_DATA', '-m68020'])
]

from common import *

# Prepare target directories
@recipe('target-prepare')
def prepare_target():
    info('Preparing target')
    with cwd('{prefix}'):
        mkdir('bin', 'etc', '{target}')
    with cwd(f'{{prefix}}/{{target}}'):
        mkdir('bin', 'ndk/include/inline', 'ndk/include/lvo', 'ndk/lib', 'ndk/lib/fd', 'ndk/lib/sfd')

# Install NDK files
@recipe('{NDK}-install')
def install_ndk():
    info('Installing NDK')
    copytree(f'{{sources}}/{{NDK}}/Include/include_h', f'{{prefix}}/{{target}}/ndk/include')
    copytree(f'{{sources}}/{{NDK}}/Include/include_i', f'{{prefix}}/{{target}}/ndk/include')
    copytree(f'{{sources}}/{{NDK}}/Include/fd', f'{{prefix}}/{{target}}/ndk/lib/fd')
    copytree(f'{{sources}}/{{NDK}}/Include/sfd', f'{{prefix}}/{{target}}/ndk/lib/sfd')
    copytree(f'{{sources}}/{{NDK}}/Include/linker_libs', f'{{prefix}}/{{target}}/ndk/lib', exclude=['README'])
    copytree(f'{{sources}}/{{NDK}}/Documentation/Autodocs', f'{{prefix}}/{{target}}/ndk/doc')

# Install ixemul headers
@recipe('headers-install')
def headers_install():
    info('Installing ixemul headers')
    copytree(f'{{sources}}/{{ixemul}}/include', f'{{prefix}}/{{target}}/libnix/include')

# Install fd2sfd tool
@recipe('fd2sfd-install')
def install_fd2sfd():
    info('Installing fd2sfd')
    copy(f'{{build}}/fd2sfd/fd2sfd', f'{{prefix}}/bin')
    copy(f'{{build}}/fd2sfd/cross/share/{{target}}/alib.h', f'{{prefix}}/{{target}}/ndk/include/inline')

# Install fd2pragma tool
@recipe('fd2pragma-install')
def install_fd2pragma():
    info('Installing fd2pragma')
    copy(f'{{build}}/fd2pragma/fd2pragma', f'{{prefix}}/bin')
    for h in ['macros.h', 'stubs.h']:
        copy(path.join(f'{{build}}/fd2pragma/Include/inline', h), f'{{prefix}}/{{target}}/ndk/include/inline')

# Install extra tools
@recipe('tools-install')
def install_tools():
    info('Installing extra tools')
    copy(f'{{build}}/ira/ira', f'{{prefix}}/bin')
    copy(f'{{build}}/vdam68k/vda68k', f'{{prefix}}/bin')

# Install libamiga
@recipe('{libamiga}-install')
def install_libamiga():
    info('Installing libamiga')
    copytree(f'{{sources}}/{{libamiga}}/lib', f'{{prefix}}/{{target}}/libnix/lib')

# Install clib2
@recipe('{clib2}-install')
def install_clib2():
    info('Installing clib2')
    with cwd(f'{{prefix}}/{{target}}/clib2'):
        copytree(f'{{build}}/{{clib2}}/lib', 'lib')
        copytree(f'{{build}}/{{clib2}}/include', 'include')

# Build vbcc
@recipe('vbcc-build')
def build_vbcc():
    copytree(f'{{sources}}/vbcc', f'{{build}}/vbcc')
    mkdir(f'{{build}}/vbcc/bin')
    config = textfile('y\ny\nsigned char\ny\nunsigned char\nn\ny\nsigned short\nn\ny\nunsigned short\nn\ny\nsigned int\nn\ny\nunsigned int\nn\ny\nsigned long long\nn\ny\nunsigned long long\nn\ny\nfloat\nn\ny\ndouble')
    make('vbcc', TARGET='m68k', ETCDIR=f'\\"{{prefix}}/etc/\\"', CONFIG=config)
    remove(config)

# Build vlink
@recipe('vlink-build')
def build_vlink():
    mkdir(f'{{build}}/vlink/objects')
    make('vlink')

# Install vbcc toolchain
@recipe('vbcc-install')
def install_vbcc_toolchain():
    info('Installing vasm')
    copy(f'{{build}}/vasm/vasmm68k_mot', f'{{prefix}}/{{target}}/bin')
    copy(f'{{build}}/vasm/vobjdump', f'{{prefix}}/bin')
    vasm = textfile('#!/bin/sh\n\n{prefix}/{target}/bin/vasmm68k_mot -I{prefix}/{target}/ndk/include "$@"')
    chmod(vasm, 0o755)
    move(vasm, f'{{prefix}}/bin/vasm')
    info('Installing vlink')
    copy(f'{{build}}/vlink/vlink', f'{{prefix}}/bin')
    info('Installing vbcc')
    copy(f'{{build}}/vbcc/bin/vbccm68k', f'{{prefix}}/{{target}}/bin')
    copy(f'{{build}}/vbcc/bin/vc', f'{{prefix}}/bin')
    copy(f'{{build}}/vbcc/bin/vprof', f'{{prefix}}/bin')
    info('Installing vclib')
    copytree(f'{{sources}}/vclib/targets/m68k-amigaos/include', f'{{prefix}}/{{target}}/vbcc/include')
    copytree(f'{{sources}}/vclib/targets/m68k-amigaos/lib', f'{{prefix}}/{{target}}/vbcc/lib')
    config = textfile('-cc={prefix}/{target}/bin/vbccm68k -hunkdebug %s -o= %s %s -O=%ld -quiet -I{prefix}/{target}/vbcc/include -I{prefix}/{target}/ndk/include -I{prefix}/{target}/include\n-ccv={prefix}/{target}/bin/vbccm68k -hunkdebug %s -o= %s %s -O=%ld -I{prefix}/{target}/vbcc/include -I{prefix}/{target}/ndk/include -I{prefix}/{target}/include\n-as={prefix}/{target}/bin/vasmm68k_mot -Fhunk -phxass -opt-fconst -nowarn=62 -quiet -I{prefix}/{target}/ndk/include -I{prefix}/{target}/include %s -o %s\n-asv={prefix}/{target}/bin/vasmm68k_mot -Fhunk -phxass -opt-fconst -nowarn=62 -I{prefix}/{target}/ndk/include -I{prefix}/{target}/include %s -o %s\n-rm=rm %s\n-rmv=rm -v %s\n-ld={prefix}/bin/vlink -bamigahunk -x -Bstatic -Cvbcc -nostdlib {prefix}/{target}/vbcc/lib/startup.o %s %s -L{prefix}/{target}/vbcc/lib -lvc -o %s\n-l2={prefix}/bin/vlink -bamigahunk -x -Bstatic -Cvbcc -nostdlib %s %s -L{prefix}/{target}/vbcc/lib -L{prefix}/{target}/vbcc/include -o %s\n-ldv={prefix}/bin/vlink -bamigahunk -t -x -Bstatic -Cvbcc -nostdlib {prefix}/{target}/vbcc/lib/startup.o %s %s -L{prefix}/{target}/vbcc/lib -lvc -o %s\n-l2v={prefix}/bin/vlink -bamigahunk -t -x -Bstatic -Cvbcc -nostdlib %s %s -L{prefix}/{target}/vbcc/lib -o %s\n-ldnodb=-s -Rshort\n-ul=-l%s\n-cf=-F%s\n-ml=500')
    chmod(config, 0o644)
    move(config, f'{{prefix}}/etc/vc.config')

# Update autotools config files
def update_autotools(dst):
    copy(f'{{sources}}/{{automake}}/lib/config.guess', path.join(dst, 'config.guess'))
    copy(f'{{sources}}/{{automake}}/lib/config.sub', path.join(dst, 'config.sub'))

# Prevent regeneration of C files from lex/yacc
def touch_genfiles(dst):
    for name in find(dst, include=['*.l', '*.y']):
        base = path.splitext(name)[0]
        [touch(f) for f in glob(base + ext) for ext in ['.c', '.h']]

# Download dependencies
def download():
    with cwd('{archives}'):
        for url in URLS:
            name = url[1] if isinstance(url, tuple) else path.basename(url)
            fetch(name, url[0] if isinstance(url, tuple) else url)
    execute('git', 'submodule', 'init')
    execute('git', 'submodule', 'update')

# Build the toolchain
def build(*args):
    if args:
        logging.warning(f"Ignoring unexpected arguments: {args}")
    environ.update({
        'PATH': '/usr/bin:/bin:/usr/local/bin',
        'LANG': 'C',
        'TERM': 'xterm',
    })
    add_site_dir('{prefix}')

    CC, CXX = 'gcc', 'g++'
    CC, CXX = find_executable(CC), find_executable(CXX)
    FLAGS = '-g -O2' + (' -Wall' if logging.getLogger().isEnabledFor(logging.INFO) else '')
    environ['MAKEFLAGS'] = '--silent' if not logging.getLogger().isEnabledFor(logging.INFO) else ''
    environ.update(CC=CC, CXX=CXX, PATH=f'{{prefix}}/bin:{{host}}/bin:{environ["PATH"]}')

    setvar(cc=CC, cxx=CXX)
    for tool in ['perl', 'pod2text', 'pod2man', 'gperf', 'patch', 'make', 'git', 'yacc', 'flex', 'bison', 'pip']:
        find_executable(tool)
    require_header(['ncurses.h'], lang='c', message='Missing libncurses-dev')
    py_ver = f'python{sys.version_info.major}.{sys.version_info.minor}'
    require_header([f'{py_ver}/Python.h'], lang='c', message='Missing python3-dev')

    execute('git', 'submodule', 'init', 'submodules/python-lhafile')
    execute('git', 'submodule', 'update', 'submodules/python-lhafile')
    unpack('python-lha', work_dir='{build}')
    pysetup('python-lha')

    download()
    for pkg in ['automake', 'm4', 'gawk', 'flex', 'bison', 'texinfo', 'autoconf']:
        unpack(f'{{{pkg}}}')
        update_autotools(f'{{sources}}/{{{pkg}}}' if pkg not in ['flex', 'autoconf'] else f'{{sources}}/{{{pkg}}}/src')
        configure(f'{{{pkg}}}', '--prefix={host}')
        make(f'{{{pkg}}}', parallel=True)
        make(f'{{{pkg}}}', 'install')
    prepare_target()

    for pkg in ['vasm', 'vlink', 'vbcc', 'vclib']:
        unpack(pkg, work_dir='{build}', top_dir=pkg if pkg != 'vclib' else 'vbcc_target_m68k-amigaos')
        if pkg == 'vasm':
            make(pkg, CPU='m68k', SYNTAX='mot')
        elif pkg == 'vlink':
            build_vlink()
        elif pkg == 'vbcc':
            patch(pkg)
            build_vbcc()
    install_vbcc_toolchain()

    for tool in ['fd2sfd', 'fd2pragma', 'sfdc', '{NDK}', 'amitools']:
        unpack(tool, work_dir='{build}' if tool in ['fd2sfd', 'fd2pragma', 'amitools'] else '')
        if tool == 'fd2sfd':
            configure(tool, '--prefix={prefix}', from_dir=f'{{build}}/{tool}')
            make(tool)
            install_fd2sfd()
        elif tool == 'fd2pragma':
            make(tool)
            install_fd2pragma()
        elif tool == 'sfdc':
            configure(tool, '--prefix={prefix}', copy_source=True)
            make(tool)
            make(tool, 'install')
        elif tool == '{NDK}':
            patch(tool)
            install_ndk()
        elif tool == 'amitools':
            with cwd(f'{{build}}/{tool}-0.6.0'):
                execute('{python}', 'setup.py', 'build')
                execute('{python}', 'setup.py', 'install', '--prefix={prefix}')

    ARCH = '-m32' if platform.machine() == 'x86_64' else ''
    CC, CXX = f'{CC} {ARCH} -std=gnu89', f'{CXX} {ARCH} -std=c++98'
    with env(CC=CC, CXX=CXX, CFLAGS=FLAGS, CXXFLAGS=FLAGS):
        configure('{binutils}', '--prefix={prefix}', '--infodir={prefix}/{target}/info', '--mandir={prefix}/share/man', '--disable-nls', '--host=i686-linux-gnu', '--target=m68k-amigaos', from_dir=f'{{submodules}}/{{binutils}}')
        touch_genfiles(f'{{submodules}}/{{binutils}}')
        make('{binutils}', parallel=True)
        for target in ['install-binutils', 'install-gas', 'install-ld', 'install-info']:
            make('{binutils}', target)

    unpack('{ixemul}', top_dir='ixemul')
    patch('{ixemul}')
    with env(CC=CC, CXX=CXX, CFLAGS=FLAGS, CXXFLAGS=FLAGS):
        configure('{gcc}', '--prefix={prefix}', '--infodir={prefix}/{target}/info', '--mandir={prefix}/share/man', '--host=i686-linux-gnu', '--build=i686-linux-gnu', '--target=m68k-amigaos', '--enable-languages=c,c++', '--enable-version-specific-runtime-libs', '--with-headers={sources}/{ixemul}/include', from_dir=f'{{submodules}}/{{gcc}}')
        touch_genfiles(f'{{submodules}}/{{gcc}}')
        [touch(f) for f in [f'{{submodules}}/{{gcc}}/gcc/c-parse.gperf', f'{{submodules}}/{{gcc}}/gcc/configure']]
        make('{gcc}', 'all-gcc', MAKEINFO='makeinfo', CFLAGS_FOR_TARGET='-noixemul')
        make('{gcc}', 'install-gcc', MAKEINFO='makeinfo', CFLAGS_FOR_TARGET='-noixemul')

    headers_install()
    unpack('{libamiga}', top_dir='.')
    install_libamiga()
    configure('{libnix}', '--prefix={prefix}/{target}/libnix', '--host=i686-linux-gnu', '--target=m68k-amigaos', from_dir=f'{{submodules}}/{{libnix}}')
    make('{libnix}', CC='m68k-amigaos-gcc', CPP='m68k-amigaos-gcc -E', AR='m68k-amigaos-ar', AS='m68k-amigaos-as', RANLIB='m68k-amigaos-ranlib', LD='m68k-amigaos-ld')
    make('{libnix}', 'install')
    copy(f'{{submodules}}/{{libnix}}/sources/headers/stabs.h', f'{{prefix}}/{{target}}/libnix/include')

    unpack('{libm}', top_dir='contrib/libm')
    update_autotools(f'{{sources}}/{{libm}}')
    with env(CC='m68k-amigaos-gcc -noixemul', AR='m68k-amigaos-ar', RANLIB='m68k-amigaos-ranlib'):
        configure('{libm}', '--prefix={prefix}/{target}/libnix', '--host=i686-linux-gnu', '--target=m68k-amigaos')
        make('{libm}')
        make('{libm}', 'install')

    with env(CC='m68k-amigaos-gcc -noixemul', AR='m68k-amigaos-ar', RANLIB='m68k-amigaos-ranlib'):
        touch(f'{{submodules}}/{{libdebug}}/configure')
        configure('{libdebug}', '--prefix={prefix}/{target}/libnix', '--host=m68k-amigaos', from_dir=f'{{submodules}}/{{libdebug}}')
        make('{libdebug}')
        make('{libdebug}', 'install')

    unpack('{clib2}', work_dir='{build}', top_dir='library')
    make('{clib2}', makefile='GNUmakefile.68k', parallel=True)
    install_clib2()

    with env(CC=CC, CXX=CXX, CFLAGS=FLAGS, CXXFLAGS=FLAGS):
        make('{gcc}', 'all-target', parallel=True, MAKEINFO='makeinfo', CFLAGS_FOR_TARGET='-noixemul')
        make('{gcc}', 'install-target', MAKEINFO='makeinfo', CFLAGS_FOR_TARGET='-noixemul')

    unpack('ira', top_dir='ira', work_dir='{build}')
    make('ira')
    unpack('vdam68k', top_dir='vda/M68k', work_dir='{build}')
    make('vdam68k')
    install_tools()

# Clean build artifacts
def clean():
    for dir in ['stamps', 'sources', 'build', 'tmpdir']:
        rmtree(f'{{{dir}}}')

# Read SDK description file
def read_sdk(filename):
    info, files = {}, []
    phase = 'info'
    with open(filename) as f:
        for line in f:
            line = line.strip()
            if phase == 'info':
                if not line:
                    phase = 'files'
                else:
                    info[line.split(':', 1)[0].lower()] = line.split(':', 1)[1].strip()
            else:
                files.append(tuple(f.strip() for f in (line.split(':', 1) if ':' in line else line.split('=')) if f))
    return info, files

# List available SDKs
def list_sdk():
    print('Available SDKs:')
    for f in find('{top}/sdk', include=['*.sdk']):
        info, _ = read_sdk(f)
        print(f' - {path.splitext(f)[0]} {info["version"]} : {info["short"]}')

# Add stubs to library
def add_stubs(src):
    obj = src.replace('.c', '.o')
    for libdir, cflags in MULTILIB:
        lib = path.join('{prefix}/{target}/libnix/lib', libdir, 'libnix/libstubs.a')
        info(f'stubs: "{obj}" -> "{lib}"')
        execute('m68k-amigaos-gcc', '-Wall', '-O3', '-fomit-frame-pointer', '-noixemul', '-c', '-o', obj, *cflags, src)
        execute('m68k-amigaos-ar', 'rs', lib, obj)
        remove(obj)

# Add library file
def add_lib(src, libname):
    obj = libname.replace('.a', '.o')
    for libdir, cflags in MULTILIB:
        lib = path.join('{prefix}/{target}/lib', libdir, libname)
        info(f'lib: "{obj}" -> "{lib}"')
        execute('m68k-amigaos-gcc', '-Wall', '-O3', '-fomit-frame-pointer', '-noixemul', '-c', '-o', obj, *cflags, src)
        execute('m68k-amigaos-ar', 'rcs', lib, obj)
        remove(obj)

# Process SDK installation
@recipe('install-sdk', 1)
def process_sdk(sdk, lib_name, files):
    with cwd(path.join('{sources}', sdk)):
        for f in files:
            kind, *args = f
            if kind == 'fd2sfd':
                fd, protos = args
                sfd = fd.rsplit('_', 1)[0] + ('.sfd' if not fd.endswith('_lib.fd') else '_lib.sfd')
                info(f'fd2sfd: "{fd}" "{protos}" -> "{sfd}"')
                execute('fd2sfd', '-o', sfd, fd, protos)
                copy(sfd, path.join('{prefix}/{target}/lib/fd', sfd))
            elif kind == 'sfdc':
                source = args[0]
                basename = source.rsplit('_lib.sfd', 1)[0]
                for mode, dir, ext in [('proto', 'proto', 'h'), ('macros', 'inline', 'h'), ('lvo', 'lvo', 'i')]:
                    execute('sfdc', '--quiet', '--target=m68k-amigaos', '--mode', mode, '--output', path.join('{prefix}/{target}/include', dir, f'{basename}.{ext}'), source)
            elif kind == 'stubs':
                filename, = args
                c_file = filename.rsplit('_lib.sfd', 1)[0] + '.c'
                info(f'stubs: "{filename}" -> "{c_file}"')
                execute('sfdc', '--quiet', '--target=m68k-amigaos', '--mode=autoopen', '--output', c_file, filename)
                add_stubs(c_file)
            elif kind == 'lib':
                filename, = args
                c_file = filename.rsplit('_lib.sfd', 1)[0] + '.c'
                lib_file = f'lib{lib_name}.a'
                info(f'lib: "{filename}" -> "{c_file}"')
                execute('sfdc', '--quiet', '--target=m68k-amigaos', '--mode=stubs', '--output', c_file, filename)
                add_lib(c_file, lib_file)
            elif kind == 'file':
                source, name = (args + [path.basename(source)])[:2]
                ext_map = {'.doc': 'doc', '.html': 'doc', '.pdf': 'doc', '.ps': 'doc', '.guide': 'guide', '.h': 'include', '.i': 'include', '.fd': 'lib/fd', '.sfd': 'lib/sfd'}
                dest_dir = next((d for e, d in ext_map.items() if name.endswith(e)), '')
                if dest_dir and dest_dir.startswith('include'):
                    lastdir = path.basename(path.dirname(source))
                    dest = path.join('{prefix}/{target}', dest_dir, lastdir, name)
                else:
                    dest = path.join('{prefix}/{target}', dest_dir, name)
                mkdir(path.dirname(dest))
                copy(source, dest)

# Install SDKs
def install_sdk(*names):
    environ['PATH'] = f'{{prefix}}/bin:{{host}}/bin:{environ["PATH"]}'
    add_site_dir('{prefix}')
    with cwd(f'{{prefix}}/{{target}}'):
        mkdir('doc', 'guide', 'include/proto', 'include/inline', 'include/lvo', 'lib/fd', 'lib/sfd', *[path.join('lib', libdir) for libdir, _ in MULTILIB])
    for name in names:
        filename = path.join('{top}/sdk', f'{name}.sdk')
        if not path.exists(filename):
            panic(f"No SDK description file for '{name}'.")
        desc, files = read_sdk(filename)
        pkg = f'{name}-{desc["version"]}'
        fetch(f'{pkg}{path.splitext(desc["url"])[1]}', desc['url'], cwd='{archives}')
        unpack(pkg, top_dir='')
        if path.isdir(path.join('{patches}', pkg)):
            patch(pkg)
        process_sdk(pkg, name, files)

# Run test examples
def test():
    install_sdk('mmu', 'mui')
    environ['PATH'] = f'{{prefix}}/bin:{environ["PATH"]}'
    with cwd(path.join('{top}', 'examples')):
        execute('make', 'clean')
        execute('make')

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
    if sys.version_info < (3, 6):
        print("Error: Requires Python 3.6+", file=sys.stderr)
        sys.exit(1)
    if not any(fnmatch(platform.system(), pat) for pat in ['Darwin', 'Linux', 'CYGWIN_NT*', 'MSYS_NT*']):
        print(f"Error: {platform.system()} not supported", file=sys.stderr)
        sys.exit(1)
    if platform.machine() not in ['i686', 'x86_64']:
        print(f"Error: {platform.machine()} architecture not supported", file=sys.stderr)
        sys.exit(1)

    parser = argparse.ArgumentParser(description='Build M68k cross-toolchain.')
    parser.add_argument('action', choices=['build', 'list-sdk', 'install-sdk', 'clean', 'test', 'download'], default='build', help='Action to perform')
    parser.add_argument('args', nargs='*', help='Action arguments')
    parser.add_argument('--binutils', choices=['2.9.1', '2.14'], default='2.14', help='Binutils version')
    parser.add_argument('--gcc', choices=['2.95.3'], default='2.95.3', help='GCC version')
    parser.add_argument('-q', '--quiet', action='store_true', help='Quiet mode')
    parser.add_argument('--prefix', help='Install directory')
    args = parser.parse_args()

    setvar(
        top=path.abspath(path.dirname(sys.argv[0])),
        binutils_ver=args.binutils,
        gcc_ver=args.gcc,
        py_ver=f'python{sys.version_info.major}.{sys.version_info.minor}',
        m4='m4-1.4.17',
        gawk='gawk-3.1.8',
        flex='flex-2.5.4',
        bison='bison-1.35',
        automake='automake-1.15',
        autoconf='autoconf-2.13',
        texinfo='texinfo-4.12',
        NDK='NDK_3.9',
        ixemul='ixemul-48.2',
        clib2='clib2',
        libm='libm-5.4',
        libnix='libnix',
        libamiga='libamiga',
        libdebug='libdebug',
        binutils='binutils-{binutils_ver}',
        gcc='gcc-{gcc_ver}',
        gpp='g++-{gcc_ver}',
        amitools='amitools-0.6.0',
        target='m68k-amigaos',
        python=sys.executable,
        sitedir=path.join('lib', '{py_ver}', 'site-packages'),
        patches=path.join('{top}', 'patches'),
        stamps=path.join('{top}', '.build-m68k', 'stamps'),
        build=path.join('{top}', '.build-m68k', 'build'),
        sources=path.join('{top}', '.build-m68k', 'sources'),
        host=path.join('{top}', '.build-m68k', 'host'),
        tmpdir=path.join('{top}', '.build-m68k', 'tmp'),
        prefix=args.prefix or path.join('{top}', 'm68k-amigaos'),
        archives=path.join('{top}', '.build-m68k', 'archives'),
        submodules=path.join('{top}', 'submodules')
    )

    if args.quiet:
        logging.getLogger().setLevel(logging.INFO)
    mkdir('{prefix}')
    globals()[args.action.replace('-', '_')](*args.args)