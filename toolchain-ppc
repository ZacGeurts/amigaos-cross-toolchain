#!/usr/bin/env python3

# Build AmigaOS 4.x PowerPC cross-toolchain.

import argparse
import logging
import platform
import sys
from fnmatch import fnmatch
from os import environ, path
import os

# URLs for dependencies
URLS = [
    'https://ftp.gnu.org/gnu/gmp/gmp-5.1.3.tar.bz2',
    'https://ftp.gnu.org/gnu/mpc/mpc-1.0.3.tar.gz',
    'https://ftp.gnu.org/gnu/mpfr/mpfr-3.1.3.tar.bz2',
    'https://ftp.gnu.org/gnu/texinfo/texinfo-4.12.tar.gz',
    'http://isl.gforge.inria.fr/isl-0.12.2.tar.bz2',
    'http://www.bastoul.net/cloog/pages/download/cloog-0.18.4.tar.gz',
    'https://ftp.gnu.org/gnu/automake/automake-1.15.tar.gz',
    ('http://hyperion-entertainment.biz/index.php/downloads?view=download&format=raw&file=69', 'SDK_53.24.lha'),
    ('svn://svn.code.sf.net/p/adtools/code/trunk/binutils', 'binutils-2.18'),
    ('svn://svn.code.sf.net/p/adtools/code/trunk/gcc', 'gcc-4.2.4'),
    ('svn://svn.code.sf.net/p/adtools/code/branches/binutils/2.23.2', 'binutils-2.23.2'),
    ('svn://svn.code.sf.net/p/adtools/code/branches/gcc/4.9.x', 'gcc-4.9.1')
]

from common import *

# Update autotools config files
def update_autotools(dst):
    remove(path.join(dst, 'config.guess'), path.join(dst, 'config.sub'))
    copy(f'{VARS["sources"]}/{VARS["automake"]}/lib/config.guess', path.join(dst, 'config.guess'))
    copy(f'{VARS["sources"]}/{VARS["automake"]}/lib/config.sub', path.join(dst, 'config.sub'))

# Prepare AmigaOS 4.x SDK
@recipe('{sdk}-prepare')
def prepare_sdk():
    info('Preparing AmigaOS 4.x SDK')
    target = path.join(VARS['prefix'], 'ppc-amigaos/SDK')
    unpack(VARS['sdk'], work_dir=VARS['archives'], top_dir='SDK_Install', dst_dir='SDK')
    unpack('SDK/base', top_dir='Include', dst_dir=path.join(target, 'include'))
    unpack('SDK/clib2', top_dir='src', dst_dir=path.join(target, 'clib2'))
    unpack('SDK/newlib', top_dir='dst', dst_dir=f'{VARS["prefix"]}/{VARS["target"]}/lib')

# Download dependencies
def download():
    archives_dir = VARS['archives']
    if not os.path.exists(archives_dir):
        mkdir(archives_dir)
    with cwd(archives_dir):
        for url in URLS:
            name = url[1] if isinstance(url, tuple) else path.basename(url)
            fetch(name, url[0] if isinstance(url, tuple) else url)

# Build the toolchain
def build(*args):
    if args:
        logging.warning(f"Ignoring unexpected arguments: {args}")
    environ.update({
        'PATH': '/usr/bin:/bin:/usr/local/bin',
        'LANG': 'C',
        'TERM': 'xterm',
    })
    add_site_dir(VARS['prefix'])

    CC, CXX = 'gcc', 'g++'
    CC, CXX = find_executable(CC), find_executable(CXX)
    FLAGS = '-g -O2' + (' -Wall' if logging.getLogger().isEnabledFor(logging.INFO) else '')
    environ['MAKEFLAGS'] = '--silent' if not logging.getLogger().isEnabledFor(logging.INFO) else ''
    environ.update(CC=CC, CXX=CXX, PATH=f'{VARS["prefix"]}/bin:{VARS["host"]}/bin:{environ["PATH"]}')

    setvar(cc=CC, cxx=CXX)
    for tool in ['curl', 'patch', 'bison', 'flex', 'make', 'svn']:
        find_executable(tool)
    py_ver = f'python{sys.version_info.major}.{sys.version_info.minor}'
    require_header([f'{py_ver}/Python.h'], lang='c', message='Missing python3-dev')

    # Check if submodule directory exists and is initialized
    submodule_path = 'submodules/python-lhafile'
    if os.path.exists(submodule_path) and os.path.isdir(submodule_path) and os.listdir(submodule_path):
        try:
            execute('git', 'submodule', 'init', '--', submodule_path)
            execute('git', 'submodule', 'update', '--', submodule_path)
            unpack('python-lha', work_dir=VARS['build'])
            pysetup('python-lha')
        except subprocess.CalledProcessError as e:
            logging.warning(f"Failed to initialize/update submodule {submodule_path}: {e.stderr}")
            logging.warning("Continuing without python-lhafile, .lha archive handling may fail.")
    else:
        logging.warning(f"Submodule {submodule_path} is empty or not found. Skipping python-lhafile installation.")

    download()
    for pkg in ['automake', 'texinfo', 'gmp', 'mpfr', 'mpc', 'isl', 'cloog', 'binutils', 'gcc']:
        unpack(f'{pkg}')
        update_autotools(f'{VARS["sources"]}/{pkg}' if pkg != 'binutils' else f'{VARS["archives"]}/{pkg}')
        config_opts = [f'--prefix={"{host}" if pkg != "binutils" else "{prefix}"}']
        if pkg == 'binutils':
            config_opts.append(f'--target={VARS["target"]}')
        elif pkg == 'mpfr':
            config_opts.append(f'--with-gmp={VARS["host"]}')
        elif pkg == 'mpc':
            config_opts.append(f'--with-gmp={VARS["host"]} --with-mpfr={VARS["host"]}')
        elif pkg == 'isl':
            config_opts.append(f'--with-gmp-prefix={VARS["host"]}')
        elif pkg == 'cloog':
            config_opts.append(f'--with-isl=system --with-gmp-prefix={VARS["host"]} --with-prefix={VARS["host"]}')
        elif pkg == 'gcc':
            config_opts.extend([
                '--with-bug-url=http://gcc.gnu.org/',
                f'--with-gmp={VARS["host"]}',
                f'--with-mpfr={VARS["host"]}',
                f'--with-isl={VARS["host"]}',
                f'--with-cloog={VARS["host"]}',
                '--enable-languages=c,c++',
                '--enable-haifa',
                '--enable-sjlj-exceptions',
                '--disable-libstdcxx-pch',
                '--disable-tls',
            ])
            if cmpver('eq', VARS['gcc_ver'], '4.2.4'):
                environ.update(CFLAGS='-g', CC=f'{CC} -m32', CXX=f'{CXX} -m32')
        configure(f'{pkg}', *config_opts, from_dir=f'{VARS["archives"]}/{pkg}/' if pkg in ['binutils', 'gcc'] else '')
        make(f'{pkg}', parallel=True)
        make(f'{pkg}', 'install')
    with env(CFLAGS=''):
        prepare_sdk()

# Clean build artifacts
def clean():
    for dir in ['sources', 'host', 'stamps', 'build', 'tmpdir']:
        rmtree(f'{dir}')

if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
    parser = argparse.ArgumentParser(description='Build AmigaOS 4.x PowerPC cross-toolchain')
    parser.add_argument('action', choices=['build', 'clean', 'download'], default='build', help='Action to perform')
    parser.add_argument('args', nargs='*', help='Action arguments')
    parser.add_argument('--prefix', type=str, help='Installation directory prefix')
    parser.add_argument('--binutils', choices=['2.18', '2.23.2'], default='2.18', help='Binutils version')
    parser.add_argument('--gcc', choices=['4.2.4', '4.9.1'], default='4.2.4', help='GCC version')
    parser.add_argument('-q', '--quiet', action='store_true', help='Suppress detailed output')
    args = parser.parse_args()

    # Set variables explicitly before any function calls
    VARS.update({
        'top': path.abspath(path.dirname(sys.argv[0])),
        'binutils_ver': args.binutils,
        'gcc_ver': args.gcc,
        'py_ver': f'python{sys.version_info.major}.{sys.version_info.minor}',
        'gmp': 'gmp-5.1.3',
        'mpfr': 'mpfr-3.1.3',
        'mpc': 'mpc-1.0.3',
        'isl': 'isl-0.12.2',
        'cloog': 'cloog-0.18.4',
        'texinfo': 'texinfo-4.12',
        'automake': 'automake-1.15',
        'binutils': f'binutils-{args.binutils}',
        'sdk': 'SDK_53.24',
        'gcc': f'gcc-{args.gcc}',
        'gpp': f'g++-{args.gcc}',
        'target': 'ppc-amigaos',
        'python': sys.executable,
        'sitedir': path.join('lib', f'python{sys.version_info.major}.{sys.version_info.minor}', 'site-packages'),
        'patches': path.join(path.abspath(path.dirname(sys.argv[0])), 'patches'),
        'stamps': path.join(path.abspath(path.dirname(sys.argv[0])), '.build-ppc', 'stamps'),
        'build': path.join(path.abspath(path.dirname(sys.argv[0])), '.build-ppc', 'build'),
        'sources': path.join(path.abspath(path.dirname(sys.argv[0])), '.build-ppc', 'sources'),
        'host': path.join(path.abspath(path.dirname(sys.argv[0])), '.build-ppc', 'host'),
        'tmpdir': path.join(path.abspath(path.dirname(sys.argv[0])), '.build-ppc', 'tmp'),
        'prefix': args.prefix or path.join(path.abspath(path.dirname(sys.argv[0])), 'ppc-amigaos'),
        'archives': path.join(path.abspath(path.dirname(sys.argv[0])), '.build-ppc', 'archives'),
        'submodules': path.join(path.abspath(path.dirname(sys.argv[0])), 'submodules'),
    })

    if args.quiet:
        logging.getLogger().setLevel(logging.INFO)
    mkdir(VARS['prefix'])
    globals()[args.action.replace('-', '_')](*args.args)